# 通讯方式

通过 Props 传递  : 父 传 子

通过 $emit 触发自定义事件 : 子 传 父

使用 ref

使用EventBus : 事件总线

$Parent 和  \$ Root 

attrs 和 listeners

Provide 与 Inject

Vuex

Pinia



# props

通过 props 传递 ( 父 传 子 )

**工作原理** 

- 父组件 可以 通过 `props` 向 子组件 传递数据. 
- 子组件 通过 接收 `props` 可以访问父组件传递的值

**优点:**

- 简单明了，易于理解。
- 有助于组件间数据流的管理，数据从上到下流动（单向数据流）。

**缺点：**

- 只能用于父组件向子组件传递数据，不能反向传递。
- 当层级较深时，数据需要逐层传递，可能会导致代码冗长和复杂。





# $emit

通过$emit触发自定义事件 (子传父)

**工作原理:**

- 子组件 可以 使用 $emit 方法 触发自定义事件
- 父组件 监听 自定义事件 并做出相对应的处理
- 通常用于 子组件向父组件传递信息

**优点：**

- 反向通讯的有效方式，能让父组件响应子组件的行为。
- 保持了父组件对数据的控制。

**缺点：**

- 当组件层级较深时，事件需要逐层冒泡，管理复杂。
- 如果事件和数据结构设计不合理，可能会导致代码难以维护。



# Ref

使用Ref

**工作原理 :**

- ref 提供了 一种访问子组件 实例 或 DOM 元素的方式
- 父组件可以通过ref 直接操作 子组件的 方法和 属性
- Vue3中需要通过 defineExpose() 去暴露 子组件的属性
  - 当父组件通过模板引用的方式获取到当前组件的实例，获取到的实例会像这样 `{ a: number, b: number }` (ref 会和在普通实例中一样被自动解包)

**优点：**

- 能直接访问子组件的实例，方便操作子组件的状态或方法。

**缺点：**

- 破坏了组件的封装性，增加了组件间的耦合。
- 如果滥用 `ref`，代码可读性会下降，难以维护。



# EventBus

 使用 EventBus（事件总线）

**工作原理：** 

- EventBus 是 Vue 实例或第三方库（如 mitt）充当的中央事件管理系统
- 组件之间可以通过它来广播和监听事件。

**优点：**

- 适用于兄弟组件之间或跨层级组件的通讯。
- 事件管理集中化，使得通讯逻辑较为清晰。

**缺点：**

- 全局事件管理可能导致事件冲突或难以追踪事件的来源。
- 随着项目规模增大，事件管理变得复杂，可能引发性能问题。

# $parent 和 \$root

**工作原理: **

- $parent 可以访问 父组件实例
- $root 可以访问 根实例

- 这些属性允许组件访问其上级或根组件的状态和方法

**优点：**

- 方便在不传递 `props` 的情况下访问上级组件的状态或方法。

**缺点：**

- 破坏了组件的封装性，增加了组件之间的耦合。
- 难以追踪状态的变化来源，维护复杂。



# attrs 和 listeners

**工作原理:**

- attrs 包含了 父组件 传递 但未在 props 中 声明的特性
- listeners 包含了 父组件 传递的 事件监听器
- 可以通过 v-bind=“$attrs” 和 v-on=“\$listeners”
  - 将这些属性和事件转发到子组件中

**优点：**

- 允许高阶组件处理传递的所有属性和事件，而不需要逐一声明。

**缺点：**

- 可能导致属性和事件被无意中覆盖或丢失。



# Provide 和 Inject

**工作原理:**

- Provide 和 Inject 用于 跨层级 的组件通讯
- 父组件通过 Provide 提供 数据
- 子 , 孙组件 通过 inject 直接 获取这些数据 , 而无需逐层转递 `props`

**优点：**

- 适用于跨层级的数据共享，减少 `props` 的传递。
- 代码结构清晰，不会因层级深而造成传递复杂。

**缺点：**

- 破坏了单向数据流的理念，可能导致数据流不透明。
- 难以追踪数据来源，可能引发维护困难。

# Vuex

**工作原理：**

- Vuex 是一个专门为 Vue.js 设计的状态管理模式。
- 它集中管理应用的所有状态，通过 `store` 来统一处理状态变化。

**优点：**

- 适用于大型应用，能够集中管理全局状态。
- 提供了严格的单向数据流，状态变化可追踪。

**缺点：**

- 对于小型应用来说，可能显得过于复杂。
- 学习成本较高，需要理解 `state`、`mutation`、`action`、`getter`、`module` 等概念。

# Pinia

**工作原理：** 

- Pinia 是 Vue 3 推荐的新一代状态管理库。
- 提供了类似 Vuex 的功能，但设计更为简洁和直观。

**优点：**

- 轻量、易用，API 设计简单。
- 支持组合式 API，更符合 Vue 3 的设计理念。

**缺点：**

- 虽然 Pinia 逐渐成为主流，但生态系统和社区支持相较于 Vuex 仍在发展中。